// Generated by gencpp from file mbf_msgs/GetPathGoal.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_GETPATHGOAL_H
#define MBF_MSGS_MESSAGE_GETPATHGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace mbf_msgs
{
template <class ContainerAllocator>
struct GetPathGoal_
{
  typedef GetPathGoal_<ContainerAllocator> Type;

  GetPathGoal_()
    : use_start_pose(false)
    , start_pose()
    , target_pose()
    , tolerance(0.0)
    , planner()
    , concurrency_slot(0)  {
    }
  GetPathGoal_(const ContainerAllocator& _alloc)
    : use_start_pose(false)
    , start_pose(_alloc)
    , target_pose(_alloc)
    , tolerance(0.0)
    , planner(_alloc)
    , concurrency_slot(0)  {
  (void)_alloc;
    }



   typedef uint8_t _use_start_pose_type;
  _use_start_pose_type use_start_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _start_pose_type;
  _start_pose_type start_pose;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _target_pose_type;
  _target_pose_type target_pose;

   typedef double _tolerance_type;
  _tolerance_type tolerance;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _planner_type;
  _planner_type planner;

   typedef uint8_t _concurrency_slot_type;
  _concurrency_slot_type concurrency_slot;





  typedef boost::shared_ptr< ::mbf_msgs::GetPathGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::GetPathGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GetPathGoal_

typedef ::mbf_msgs::GetPathGoal_<std::allocator<void> > GetPathGoal;

typedef boost::shared_ptr< ::mbf_msgs::GetPathGoal > GetPathGoalPtr;
typedef boost::shared_ptr< ::mbf_msgs::GetPathGoal const> GetPathGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::GetPathGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'mbf_msgs': ['/home/jerom/turtlebot_ws/devel/share/mbf_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::GetPathGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::GetPathGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::GetPathGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "301d9f5ec2f8f08d1d4e16663a6d2c5a";
  }

  static const char* value(const ::mbf_msgs::GetPathGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x301d9f5ec2f8f08dULL;
  static const uint64_t static_value2 = 0x1d4e16663a6d2c5aULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/GetPathGoal";
  }

  static const char* value(const ::mbf_msgs::GetPathGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Get a path from start_pose or current position to the target pose\n"
"\n"
"# Use start_pose or current position as the beginning of the path\n"
"bool use_start_pose\n"
"\n"
"# The start pose for the path; optional, used if use_start_pose is true\n"
"geometry_msgs/PoseStamped start_pose\n"
"\n"
"# The pose to achieve with the path\n"
"geometry_msgs/PoseStamped target_pose\n"
"\n"
"# If the goal is obstructed, how many meters the planner can relax the constraint in x and y before failing\n"
"float64 tolerance\n"
"\n"
"# Planner to use; defaults to the first one specified on \"planners\" parameter\n"
"string planner\n"
"\n"
"# use different slots for concurrency\n"
"uint8 concurrency_slot\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::mbf_msgs::GetPathGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.use_start_pose);
      stream.next(m.start_pose);
      stream.next(m.target_pose);
      stream.next(m.tolerance);
      stream.next(m.planner);
      stream.next(m.concurrency_slot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPathGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::GetPathGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::GetPathGoal_<ContainerAllocator>& v)
  {
    s << indent << "use_start_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_start_pose);
    s << indent << "start_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pose);
    s << indent << "target_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.target_pose);
    s << indent << "tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance);
    s << indent << "planner: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planner);
    s << indent << "concurrency_slot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.concurrency_slot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_GETPATHGOAL_H
