// Generated by gencpp from file mbf_msgs/CheckPoseResponse.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_CHECKPOSERESPONSE_H
#define MBF_MSGS_MESSAGE_CHECKPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mbf_msgs
{
template <class ContainerAllocator>
struct CheckPoseResponse_
{
  typedef CheckPoseResponse_<ContainerAllocator> Type;

  CheckPoseResponse_()
    : state(0)
    , cost(0)  {
    }
  CheckPoseResponse_(const ContainerAllocator& _alloc)
    : state(0)
    , cost(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef uint32_t _cost_type;
  _cost_type cost;



  enum {
    FREE = 0u,
    INSCRIBED = 1u,
    LETHAL = 2u,
    UNKNOWN = 3u,
    OUTSIDE = 4u,
  };


  typedef boost::shared_ptr< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckPoseResponse_

typedef ::mbf_msgs::CheckPoseResponse_<std::allocator<void> > CheckPoseResponse;

typedef boost::shared_ptr< ::mbf_msgs::CheckPoseResponse > CheckPoseResponsePtr;
typedef boost::shared_ptr< ::mbf_msgs::CheckPoseResponse const> CheckPoseResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'mbf_msgs': ['/home/jerom/turtlebot_ws/devel/share/mbf_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d74139e1f7169aa4fb64b44c3a698692";
  }

  static const char* value(const ::mbf_msgs::CheckPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd74139e1f7169aa4ULL;
  static const uint64_t static_value2 = 0xfb64b44c3a698692ULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/CheckPoseResponse";
  }

  static const char* value(const ::mbf_msgs::CheckPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8                      FREE      =  0\n"
"uint8                      INSCRIBED =  1\n"
"uint8                      LETHAL    =  2\n"
"uint8                      UNKNOWN   =  3\n"
"uint8                      OUTSIDE   =  4\n"
"\n"
"uint8                      state\n"
"uint32                     cost\n"
"\n"
;
  }

  static const char* value(const ::mbf_msgs::CheckPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::CheckPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::CheckPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "cost: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_CHECKPOSERESPONSE_H
