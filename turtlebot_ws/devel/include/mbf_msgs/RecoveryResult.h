// Generated by gencpp from file mbf_msgs/RecoveryResult.msg
// DO NOT EDIT!


#ifndef MBF_MSGS_MESSAGE_RECOVERYRESULT_H
#define MBF_MSGS_MESSAGE_RECOVERYRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mbf_msgs
{
template <class ContainerAllocator>
struct RecoveryResult_
{
  typedef RecoveryResult_<ContainerAllocator> Type;

  RecoveryResult_()
    : outcome(0)
    , message()
    , used_plugin()  {
    }
  RecoveryResult_(const ContainerAllocator& _alloc)
    : outcome(0)
    , message(_alloc)
    , used_plugin(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _outcome_type;
  _outcome_type outcome;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _used_plugin_type;
  _used_plugin_type used_plugin;



  enum {
    SUCCESS = 0u,
    FAILURE = 150u,
    CANCELED = 151u,
    PAT_EXCEEDED = 152u,
    TF_ERROR = 153u,
    NOT_INITIALIZED = 154u,
    INVALID_PLUGIN = 155u,
    INTERNAL_ERROR = 156u,
  };


  typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const> ConstPtr;

}; // struct RecoveryResult_

typedef ::mbf_msgs::RecoveryResult_<std::allocator<void> > RecoveryResult;

typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult > RecoveryResultPtr;
typedef boost::shared_ptr< ::mbf_msgs::RecoveryResult const> RecoveryResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mbf_msgs::RecoveryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mbf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'mbf_msgs': ['/home/jerom/turtlebot_ws/devel/share/mbf_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mbf_msgs::RecoveryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "930c1ba9c1aaf2fbe47ca27d6e5afb5e";
  }

  static const char* value(const ::mbf_msgs::RecoveryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x930c1ba9c1aaf2fbULL;
  static const uint64_t static_value2 = 0xe47ca27d6e5afb5eULL;
};

template<class ContainerAllocator>
struct DataType< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mbf_msgs/RecoveryResult";
  }

  static const char* value(const ::mbf_msgs::RecoveryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"# Predefined success codes:\n"
"uint8 SUCCESS         = 0\n"
"\n"
"# Possible server codes:\n"
"uint8 FAILURE         = 150\n"
"uint8 CANCELED        = 151\n"
"uint8 PAT_EXCEEDED    = 152\n"
"uint8 TF_ERROR        = 153\n"
"uint8 NOT_INITIALIZED = 154\n"
"uint8 INVALID_PLUGIN  = 155\n"
"uint8 INTERNAL_ERROR  = 156\n"
"# 171..199 are reserved as plugin specific errors\n"
"\n"
"uint32 outcome\n"
"string message\n"
"string used_plugin\n"
"\n"
;
  }

  static const char* value(const ::mbf_msgs::RecoveryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.outcome);
      stream.next(m.message);
      stream.next(m.used_plugin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecoveryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mbf_msgs::RecoveryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mbf_msgs::RecoveryResult_<ContainerAllocator>& v)
  {
    s << indent << "outcome: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.outcome);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "used_plugin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.used_plugin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MBF_MSGS_MESSAGE_RECOVERYRESULT_H
