;; Auto-generated. Do not edit!


(when (boundp 'mbf_msgs::ExePathGoal)
  (if (not (find-package "MBF_MSGS"))
    (make-package "MBF_MSGS"))
  (shadow 'ExePathGoal (find-package "MBF_MSGS")))
(unless (find-package "MBF_MSGS::EXEPATHGOAL")
  (make-package "MBF_MSGS::EXEPATHGOAL"))

(in-package "ROS")
;;//! \htmlinclude ExePathGoal.msg.html
(if (not (find-package "NAV_MSGS"))
  (ros::roseus-add-msgs "nav_msgs"))


(defclass mbf_msgs::ExePathGoal
  :super ros::object
  :slots (_path _controller _concurrency_slot ))

(defmethod mbf_msgs::ExePathGoal
  (:init
   (&key
    ((:path __path) (instance nav_msgs::Path :init))
    ((:controller __controller) "")
    ((:concurrency_slot __concurrency_slot) 0)
    )
   (send-super :init)
   (setq _path __path)
   (setq _controller (string __controller))
   (setq _concurrency_slot (round __concurrency_slot))
   self)
  (:path
   (&rest __path)
   (if (keywordp (car __path))
       (send* _path __path)
     (progn
       (if __path (setq _path (car __path)))
       _path)))
  (:controller
   (&optional __controller)
   (if __controller (setq _controller __controller)) _controller)
  (:concurrency_slot
   (&optional __concurrency_slot)
   (if __concurrency_slot (setq _concurrency_slot __concurrency_slot)) _concurrency_slot)
  (:serialization-length
   ()
   (+
    ;; nav_msgs/Path _path
    (send _path :serialization-length)
    ;; string _controller
    4 (length _controller)
    ;; uint8 _concurrency_slot
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; nav_msgs/Path _path
       (send _path :serialize s)
     ;; string _controller
       (write-long (length _controller) s) (princ _controller s)
     ;; uint8 _concurrency_slot
       (write-byte _concurrency_slot s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; nav_msgs/Path _path
     (send _path :deserialize buf ptr-) (incf ptr- (send _path :serialization-length))
   ;; string _controller
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _controller (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; uint8 _concurrency_slot
     (setq _concurrency_slot (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;;
   self)
  )

(setf (get mbf_msgs::ExePathGoal :md5sum-) "33ff17a095839640ba7e28c0dc858031")
(setf (get mbf_msgs::ExePathGoal :datatype-) "mbf_msgs/ExePathGoal")
(setf (get mbf_msgs::ExePathGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Follow the given path until completion or failure

nav_msgs/Path path

# Controller to use; defaults to the first one specified on \"controllers\" parameter
string controller

# use different slots for concurrency
uint8 concurrency_slot


================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :mbf_msgs/ExePathGoal "33ff17a095839640ba7e28c0dc858031")


